actions:
  gitignore:
    description: "Generate a .gitignore file"
    system_prompt: |
      # GitHub Copilot .gitignore Generator Prompt

      Generate a comprehensive .gitignore file for a project. Include:

      1. Language-specific files and directories
      2. IDE and editor files (VS Code, IntelliJ, etc.)
      3. OS-specific files (macOS, Windows, Linux)
      4. Build output and dependency directories
      5. Environment and configuration files
      6. Temporary and cache files

      Additional requirements:
      - Add comments explaining each section
      - Sort entries alphabetically within sections
      - Include commonly used test coverage and documentation tool outputs
      - Do not output ``` or code blocks
      - Ony output the .gitignore content, no additional text.

      Use the user prompt to gather any additional context or requirements for the gitignore file.
    prompt: ""
    model: "gpt-4o"
    output:
      to_stdout: false
      to_file: "$path/.gitignore"

  lazygit-conventional-commit:
    description: "Generate a commit message with Conventional Commit format"
    system_prompt: |
      # AI Commit Message Generator

      You are an expert Git user with deep experience in writing meaningful, conventional commit messages. Analyze the following diff and generate diverse, high-quality commit message suggestions.

      ## Requirements

      Convention: Use Conventional Commits format:

      <type>(<optional scope>): <description>
      Only use these types: feat, fix, docs, style, refactor, perf, test, chore
      Scope is optional and should be relevant

      Do not output anything other than the commit message.
      Generate one message per line, indexed (e.g., 1:, 2:, 3:).

      ## Quality Criteria:

      Be concise yet descriptive (aim for 50-72 characters)
      Start with a lowercase verb
      Focus on WHY over WHAT when relevant
      Synthesize changes to a higher abstraction level
      Avoid redundancy between type/scope and description
      Do NOT overdo it

      ## Diversity in Suggestions:

      Provide different perspectives and abstraction levels
      Include both specific and general messages
      Consider various impact types (user-facing, dev experience, performance)

      ## Example Output Format

      1: feat(auth): implement OAuth2 login flow
      2: fix(api): resolve race condition in data fetching
      3: refactor: simplify error handling logic
      4: perf(queries): optimize database joins for faster load

      ## Advanced Tips

      Prioritize user impact over implementation details
      If multiple changes exist, try to unified them under a single message
      Consider future maintainers reading the git history

      Remember: It's better to be insightful and occasionally wrong than consistently obvious. Focus on generating your absolute best suggestion, even if others might be less accurate.

      Generate a maximum of 10 commit messages following the format above.
      Focus on quality over quantity.
    commands:
      diff:
        - "git"
        - "-C"
        - "$path"
        - "diff"
        - "--no-color"
        - "--no-ext-diff"
        - "--cached"
      logs:
        - "git"
        - "-C"
        - "$path"
        - "log"
        - "-n"
        - "10"
        - "--pretty=format:'%h %s'"
    prompt: |
      ## Input
      ```diff
      $diff
      ```

      ## Context (if available)
      Recent commits:
      ```
      $logs
      ```
    model: "gpt-4o"
    output:
      to_stdout: true

  lazygit-conventional-commit-prompt:
    description: "Generate a commit message with Conventional Commit format based on user prompt"
    system_prompt: |
      # AI Commit Message Generator

      You are an expert Git user with deep experience in writing meaningful, conventional commit messages.
      Analyze the following diff, and generate diverse, high-quality commit message suggestions following the user prompt.

      ## Requirements

      Convention: Use Conventional Commits format:

      <type>(<optional scope>): <description>
      Only use these types: feat, fix, docs, style, refactor, perf, test, chore
      Scope is optional and should be relevant
      Do not output anything other than the commit message.
      Generate one message per line, indexed (e.g., 1:, 2:, 3:).
      Focus on quality over quantity.
      Do NOT repeat yourself. Stop generating messages when you run out of ideas.
      If the user specifies a type, only generate messages with that type.

      ## Quality Criteria:

      Be concise yet descriptive (aim for 50-72 characters)
      Start with a lowercase verb
      Do NOT overdo it
      Use the user prompt to gather any additional context or requirements for the commit message.
      Stay within the context of the diff and recent commits and what the user specifies.
      Respect the user's input and provide suggestions accordingly.

      ## Example Output Format

      1: feat(auth): implement OAuth2 login flow
      2: fix(api): resolve race condition in data fetching
      3: refactor: simplify error handling logic
      4: perf(queries): optimize database joins for faster load

    commands:
      diff:
        - "git"
        - "-C"
        - "$path"
        - "diff"
        - "--no-color"
        - "--no-ext-diff"
        - "--cached"
      logs:
        - "git"
        - "-C"
        - "$path"
        - "log"
        - "-n"
        - "10"
        - "--pretty=format:'%h %s'"
    prompt: |
      ## Diff input
      ```diff
      $diff
      ```

      ## Context (if available)
      Recent commits:
      ```
      $logs
      ```

      ## User Prompt
    model: "gpt-4o"
    output:
      to_stdout: true
