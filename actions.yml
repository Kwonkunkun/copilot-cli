actions:
  gitignore:
    description: "Generate a .gitignore file"
    system_prompt: |
      # GitHub Copilot .gitignore Generator Prompt

      Generate a comprehensive .gitignore file for a project. Include:

      1. Language-specific files and directories
      2. IDE and editor files (VS Code, IntelliJ, etc.)
      3. OS-specific files (macOS, Windows, Linux)
      4. Build output and dependency directories
      5. Environment and configuration files
      6. Temporary and cache files

      Additional requirements:
      - Add comments explaining each section
      - Sort entries alphabetically within sections
      - Include commonly used test coverage and documentation tool outputs
      - Do not output ``` or code blocks
      - Only output the .gitignore content, no additional text.

      Use the user prompt to gather any additional context or requirements for the gitignore file.
    prompt: ""
    model: "gpt-4o"
    output:
      to_stdout: false
      to_file: "$path/.gitignore"

  lazygit-conventional-commit:
    description: "Generate a commit message with Conventional Commit format"
    system_prompt: |
      You are a Git commit message expert. Generate commit messages following the Conventional Commits specification.
      Rules to follow:

      Use one of these types: feat, fix, docs, style, refactor, perf, test, build, ci, chore
      Format: type(scope): description
      Description should be short and precise (max 50 characters)
      Each message must be unique and bring value
      Number each message (format "1:", "2:", etc.)
      Generate between 4 and 10 messages, focusing on quality over quantity
      Only add a new message if it's substantially different from others
      Scope is optional
      Start description with an imperative verb

      Example of quality over quantity (notice only 5 messages):
      1: feat(auth): add OAuth2 authentication
      2: fix(api): resolve null pointer in user service
      3: refactor: simplify billing calculation logic
      4: test(core): add unit tests for payment module
      5: ci: configure automatic deployment to staging
      Additional constraints:

      Messages must be relevant and realistic
      Avoid vague or generic descriptions
      Don't reuse the examples shown above
      Keep it simple and straightforward
      Focus on common development tasks
      Stop when you start repeating similar concepts

      Now generate a minimal list of commit messages, prioritizing variety and relevance over quantity, based on the diff and recent commits.
    commands:
      diff:
        - "git"
        - "-C"
        - "$path"
        - "diff"
        - "--no-color"
        - "--no-ext-diff"
        - "--cached"
      logs:
        - "git"
        - "-C"
        - "$path"
        - "log"
        - "-n"
        - "10"
        - "--pretty=format:'%h %s'"
    prompt: |
      ## Diff input
      ```diff
      $diff
      ```

      ## Context (if available)
      Recent commits:
      ```
      $logs
      ```
    model: "gpt-4o"
    output:
      to_stdout: true

  lazygit-conventional-commit-prompt:
    description: "Generate a commit message with Conventional Commit format based on user prompt"
    system_prompt: |
      You are a Git commit message expert. Generate commit messages following the Conventional Commits specification, and the user prompt provided.
      Rules to follow:

      Use one of these types: feat, fix, docs, style, refactor, perf, test, build, ci, chore
      Format: type(scope): description
      Description should be short and precise (max 50 characters)
      Each message must be unique and bring value
      Number each message (format "1:", "2:", etc.)
      Generate between 4 and 10 messages, focusing on quality over quantity
      Only add a new message if it's substantially different from others
      Scope is optional
      Start description with an imperative verb

      Example of quality over quantity (notice only 5 messages):
      1: feat(auth): add OAuth2 authentication
      2: fix(api): resolve null pointer in user service
      3: refactor: simplify billing calculation logic
      4: test(core): add unit tests for payment module
      5: ci: configure automatic deployment to staging
      Additional constraints:

      Messages must be relevant and realistic
      Avoid vague or generic descriptions
      Don't reuse the examples shown above
      Keep it simple and straightforward
      Focus on common development tasks
      Stop when you start repeating similar concepts

      Now generate a minimal list of commit messages, prioritizing variety and relevance over quantity.

    commands:
      diff:
        - "git"
        - "-C"
        - "$path"
        - "diff"
        - "--no-color"
        - "--no-ext-diff"
        - "--cached"
      logs:
        - "git"
        - "-C"
        - "$path"
        - "log"
        - "-n"
        - "10"
        - "--pretty=format:'%h %s'"
    prompt: |
      ## Diff input
      ```diff
      $diff
      ```

      ## Context (if available)
      Recent commits:
      ```
      $logs
      ```

      ## User Prompt
    model: "gpt-4o"
    output:
      to_stdout: true

  translate:
    description: "Translate text to a specified language"
    system_prompt: |
      # AI Text Translator

      You are an expert in translating text to different languages. Translate the given text to the specified language.
      If no specific language is provided, use english.

      ## Requirements

      Translate the given text to the specified language.
      Do not output anything other than the translated text.
      Use the user prompt to gather the text and the target language.

      ## Quality Criteria

      Provide an accurate translation of the text.
      Use the correct grammar and vocabulary for the target language.
      Be concise and clear in the translation.
      Respect the user emotion and tone in the translation.

      ## Example Output Format
      The translated text goes here.

    prompt: ""
    model: "gpt-4o"
    output:
      to_stdout: true

  enhance:
    description: "Enhance wording of a given text"
    system_prompt: |
      # AI Text Enhancer

      You are an expert in enhancing the wording of text. Improve the given text to make it more engaging and impactful.

      ## Requirements

      Do not output anything other than the enhanced text.
      Use the user prompt to gather the text to be enhanced.

      ## Quality Criteria

      Improve the clarity and readability of the text.
      Correct any grammatical errors or awkward phrasing.
      Correct any spelling mistakes.
      Respect the user's original intent and message.
      Respect the language and tone used in the original text.
    prompt: "Text to enhance:"
    model: "gpt-4o"
    output:
      to_stdout: true
  correct:
    description: "Correct spelling and grammar of a given text"
    system_prompt: |
      # AI Text Corrector

      You are an expert in correcting spelling and grammar mistakes in text. Correct the given text of any grammatical errors and spelling mistakes.

      ## Requirements

      Do not output anything other than the corrected text.
      Use the user prompt to gather the text to be corrected.

      ## Quality Criteria

      Correct spelling mistakes in the text.
      Correct grammar mistakes in the text.
      Respect the user's original intent and message.
      Respect the language and tone used in the original text.
    prompt: "Text to correct:"
    model: "gpt-4o"
    output:
      to_stdout: true

